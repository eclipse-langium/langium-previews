<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on Langium</title><link>/tutorials/</link><description>Recent content in Tutorials on Langium</description><generator>Hugo -- gohugo.io</generator><atom:link href="/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Validation</title><link>/tutorials/validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/validation/</guid><description>Overview The Validation Registry Finding Nodes to Validate Registering Validations In this tutorial, we will be talking about implementing validation for your Langium-based language. We recommend first reading the previous tutorial about writing a grammar, as we will assume you&amp;rsquo;re familiar with the topics covered there. We&amp;rsquo;ll also assume that you have a working language to add validation to, so double check that npm run langium:generate succeeds without errors before you proceed.</description></item><item><title>Customizing the CLI</title><link>/tutorials/customizing_cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/customizing_cli/</guid><description>Overview About the Command Line Interface Adding a Parse and Validate Action Building and Running the CLI In this tutorial, we&amp;rsquo;ll be talking about customizing the command line interface for your language. We recommend reading through previous tutorials about writing a grammar and validation. Once you have a good grasp on those concepts, then you should be all set for setting up a CLI.</description></item><item><title>Generation</title><link>/tutorials/generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/generation/</guid><description>Setting up the Generator API Deciding Output to Generate Generating from Statements Writing an Expression Evaluator Generating from Statements with the Evaluator Connecting the Generator to the CLI In this tutorial we&amp;rsquo;ll be showing how to implement basic generation for your language. When we&amp;rsquo;re talking about generation, we&amp;rsquo;re talking about transforming an AST from your Langium-based language into some output target. This could be another language of similar functionality (transpilation), a lower level language (compilation), or generating some artifacts/data that will be consumed by another application.</description></item><item><title>Building an Extension</title><link>/tutorials/building_an_extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/building_an_extension/</guid><description>Setting up the Scripts Generate an Extension Installing Adding an Icon Conclusion In this tutorial we&amp;rsquo;ll be going over how to build a VSIX extension (VSCode extension) for your Langium-based language. This will allow providing LSP support in VSCode for your language. We&amp;rsquo;ll assume that you&amp;rsquo;ve already looked at the previous tutorial, and have had time to read the guide on bundling, so that you&amp;rsquo;re ready to build an extension.</description></item><item><title>Langium + Monaco Editor</title><link>/tutorials/langium_and_monaco/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/langium_and_monaco/</guid><description>Technologies You&amp;rsquo;ll Need Getting your Language Setup for the Web Factoring out File System Dependencies Setting up Monaco Setting up a Static Page Serving via NodeJS Updated on Oct. 4th, 2023 for usage with monaco-editor-wrapper 3.1.0 &amp;amp; above, as well as Langium 2.0.2
In this tutorial we&amp;rsquo;ll be talking about running Langium in the web with the Monaco editor. If you&amp;rsquo;re not familiar with Monaco, it&amp;rsquo;s the editor that powers VS Code.</description></item><item><title>Generation in the Web</title><link>/tutorials/generation_in_the_web/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/generation_in_the_web/</guid><description>Handling Document Validations Listening for Notifications in the Client Interpreting Draw Commands (Drawing) Updated on Oct. 4th, 2023 for usage with monaco-editor-wrapper 3.1.0 &amp;amp; above.
In this tutorial we&amp;rsquo;ll be talking about how to perform generation in the web by listening for document builder notifications. There are multiple ways to hook into Langium to utilize the generator, such as by directly exporting the generator API.</description></item><item><title>Writing a Grammar</title><link>/tutorials/writing_a_grammar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/writing_a_grammar/</guid><description>Planning Sketching the Grammar Adding Commands Adding Expressions Adding Terminals In this tutorial we will be talking about writing a grammar for your language in Langium. As a motivating example, we&amp;rsquo;ll be describing how to write a grammar for the MiniLogo language. If you&amp;rsquo;re not familiar with MiniLogo, it&amp;rsquo;s a smaller implementation of the Logo programming language. Logo itself is a lot like Turtle from Python.</description></item></channel></rss>