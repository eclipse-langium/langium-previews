<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scoping on Langium</title><link>/guides/scoping/</link><description>Recent content in Scoping on Langium</description><generator>Hugo -- gohugo.io</generator><atom:link href="/guides/scoping/index.xml" rel="self" type="application/rss+xml"/><item><title>Qualified Name Scoping</title><link>/guides/scoping/qualified-name/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/scoping/qualified-name/</guid><description>Qualified name scoping refers to a style of referencing elements using a fully qualified name. Such a fully qualified name is usually composed of the original name of the target element and the names of its container elements. You will usually see this method of scoping in C-like languages using namespaces or in Java using packages. The following code snippet shows an example of how qualified name scoping works from an end-user perspective, by using a function in a C++ namespace:</description></item><item><title>Class Member Scoping</title><link>/guides/scoping/class-member/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/scoping/class-member/</guid><description>In this guide we will take a look at member based scoping. It&amp;rsquo;s a mechanism you are likely familiar with from object oriented languages such as Java, C# and JavaScript:
class A { b: B; } class B { value: string; } function test(): void { const a = new A(); const b = a.b; // Refers to the `b` defined in class `A` const value = b.value; // Refers to the `value` defined in class `B` } Member based scoping like this requires not only a modification of the default scoping provider, but also some other prerequisites.</description></item></channel></rss>